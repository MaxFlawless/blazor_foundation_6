@using Microsoft.JSInterop;
@using Blazor_Foundation_6.Components.Plugin.Sticky;
@inject IJSRuntime JSRuntime;
@using Newtonsoft.Json.Linq;
@if (Sticky)

{
    <StickyContainer Id="@Id" DataOptions="@(new JObject() { { "marginTop", 0} })">
        <StickyTitleBar Id="@(Id + "-content")" >
            @ChildContent
        </StickyTitleBar>
    </StickyContainer>

}
else
{
    <div class="@Class" id="@Id" style="@Style">
        @ChildContent
    </div>
}





@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string Class { get; set; }

    [Parameter]
    public string Style { get; set; }

    [Parameter]
    public bool Sticky { get; set; }

    [Parameter]
    public bool AutoManaged { get; set; } = true;

    [Parameter]
    public JObject DataOptions { get; set; }


    protected override async Task OnInitializedAsync()
    {
        string forcedClass = "top-bar";
        if (Sticky)
        {
            forcedClass = "title-bar";
        }

        if (Class != null)
        {
            Class = $"{forcedClass} " + Class;
        }
        else
        {
            Class = forcedClass;
        }


    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (AutoManaged && Sticky)
            {
                await JSRuntime.InvokeVoidAsync("StickyRegister", Id, DataOptions != null ? DataOptions.ToString() : null);
            }
        }

    }
}
