@using Microsoft.JSInterop;
@using Newtonsoft.Json.Linq;
@inject IJSRuntime JSRuntime;

<div class="slider vertical" data-slider data-initial-start="@Value.ToString()"
     data-start="@Min.ToString()" data-step="@Step.ToString()" data-end="@Max.ToString()"
     data-vertical="true">
    <span class="slider-handle" data-slider-handle role="slider" tabindex="1" aria-controls="@DataBindingId"></span>
    <span class="slider-fill" data-slider-fill></span>
    @if (DataBindingId == null)
    {
        <input type="hidden">
    }
</div>

@code {

    /// <summary>
    /// Unique HTML Identifier.
    /// </summary>
    [Parameter]
    public string Id { get; set; }

    /// <summary>
    /// Custom Class to Append at the end of default Foundation Class.
    /// </summary>
    [Parameter]
    public string Class { get; set; }

    /// <summary>
    /// HTML Style Attribute (JObject).
    /// <br/><br/><see href="https://flawlessloop.com/how-to-use-style-attribute/">How to Use Style</see>
    /// </summary>
    [Parameter]
    public JObject Style { get; set; }

    /// <summary>
    /// Minimum Value
    /// </summary>
    [Parameter]
    public int Min { get; set; } = 1;

    /// <summary>
    /// Max Value
    /// </summary>
    [Parameter]
    public int Max { get; set; } = 100;

    /// <summary>
    /// Current Value (Default: 1)
    /// </summary>
    [Parameter]
    public int Value { get; set; } = 1;

    /// <summary>
    /// True when control is disabled (Default: false)
    /// </summary>
    [Parameter]
    public bool Disabled { get; set; } = false;

    /// <summary>
    /// Unit Steps (Default: 1)
    /// </summary>
    [Parameter]
    public int Step { get; set; } = 1;

    /// <summary>
    /// Define if input control is not hidden.
    /// </summary>
    [Parameter]
    public string DataBindingId { get; set; }

    
    /// <summary>
    /// True: Will Trigger Foundation Script Registration Automatically Without any Options.
    /// </summary>
    [Parameter]
    public bool AutoManaged { get; set; } = true;

    /// <summary>
    /// List of Options to pass when initilization is handled by Blazor. Leave blank if AutoManaged = false.
    /// </summary>
    [Parameter]
    public JObject DataOptions { get; set; }



    protected override async Task OnInitializedAsync()
    {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (AutoManaged)
            {
                await JSRuntime.InvokeVoidAsync("SliderRegister", Id, DataOptions != null ? DataOptions.ToString() : null);
            }
        }

    }
}

