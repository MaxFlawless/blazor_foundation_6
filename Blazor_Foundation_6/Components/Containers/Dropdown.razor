@using Microsoft.JSInterop;
@using Newtonsoft.Json.Linq;
@inject IJSRuntime JSRuntime;

<div class="@Class" data-position="@Position" data-alignment="@DataAlignment" id="@Id" style="@Style.ToInlineCSS()" data-dropdown data-auto-focus="true">
    @ChildContent
</div>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    /// <summary>
    /// Unique HTML Identifier.
    /// </summary>
    [Parameter]
    public string Id { get; set; }

    /// <summary>
    /// Custom Class to Append at the end of default Foundation Class.
    /// </summary>
    [Parameter]
    public string Class { get; set; }

    /// <summary>
    /// HTML Style Attribute (JObject).
    /// <br/><br/><see href="https://flawlessloop.com/how-to-use-style-attribute/">How to Use Style</see>
    /// </summary>
    [Parameter]
    public JObject Style { get; set; }

    /// <summary>
    /// left, right, top or bottom
    /// </summary>
    [Parameter]
    public string Position { get; set; }

    /// <summary>
    /// top, middle, left, right or bottom
    /// </summary>
    [Parameter]
    public string DataAlignment { get; set; }

    /// <summary>
    /// If false, you will have to create initializer for this Foundation 6 component yourself in javascript. (Default: True)
    /// </summary>
    [Parameter]
    public bool AutoManaged { get; set; } = true;
    
    /// <summary>
    /// List of Options to pass when initilization is handled by Blazor. Leave blank if AutoManaged = false.
    /// </summary>
    [Parameter]
    public JObject DataOptions { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (Class != null)
        {
            Class = $"dropdown-pane " + Class;
        }
        else
        {
            Class = "dropdown-pane";
        }

        if (Position == null) { Position += $"position-left"; }
        if (DataAlignment == null) { DataAlignment += $"bottom"; }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (AutoManaged)
            {
                await JSRuntime.InvokeVoidAsync("DropdownRegister", Id, DataOptions != null ? DataOptions.ToString() : null);
            }
        }

    }

    public async Task TriggerToggle()
    {
        await JSRuntime.InvokeVoidAsync("ElementToggle", Id);
    }

    public async Task TriggerOpen()
    {
        await JSRuntime.InvokeVoidAsync("ElementOpen", Id);
    }

    public async Task TriggerClose()
    {
        await JSRuntime.InvokeVoidAsync("ElementClose", Id);
    }
}
