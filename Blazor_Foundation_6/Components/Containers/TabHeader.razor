@using Microsoft.JSInterop;
@using Newtonsoft.Json.Linq;
@inject IJSRuntime JSRuntime;
@implements System.IDisposable;
<ul class="@Class" id="@Id" style="@Style.ToInlineCSS()" data-responsive-accordion-tabs="tabs medium-accordion large-tabs">
    @ChildContent
</ul>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    /// <summary>
    /// Unique HTML Identifier.
    /// </summary>
    [Parameter]
    public string Id { get; set; }

    /// <summary>
    /// Custom Class to Append at the end of default Foundation Class.
    /// </summary>
    [Parameter]
    public string Class { get; set; }

    /// <summary>
    /// HTML Style Attribute (JObject).
    /// <br/><br/><see href="https://flawlessloop.com/how-to-use-style-attribute/">How to Use Style</see>
    /// </summary>
    [Parameter]
    public JObject Style { get; set; }

    /// <summary>
    /// If false, you will have to create initializer for this Foundation 6 component yourself in javascript. (Default: True)
    /// </summary>
    [Parameter]
    public bool AutoManaged { get; set; } = true;

    /// <summary>
    /// True: Tab Menu is Vertical (Default: False)
    /// </summary>
    [Parameter]
    public bool Vertical { get; set; } = false;

    /// <summary>
    /// [<see href="https://get.foundation/sites/docs/tabs.html#javascript-reference">See Docs</see>]
    /// List of Options to pass when initilization is handled by Blazor. Leave blank if AutoManaged = false.
    /// </summary>
    [Parameter]
    public JObject DataOptions { get; set; }


    protected override async Task OnInitializedAsync()
    {

        if (Class != null) { Class = "tabs " + Class; }
        else { Class = "tabs"; }

        if (Vertical) { Class += " vertical"; }

    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (AutoManaged)
            {
                await JSRuntime.InvokeVoidAsync("TabRegister", Id, DataOptions != null ? DataOptions.ToString() : null);
            }
        }

    }


    public void Dispose()
    {
        if (AutoManaged)
        {
            JSRuntime.InvokeVoidAsync("FoundationDestroy", Id);
        }
    }
}

